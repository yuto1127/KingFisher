/backend

model
php artisan make:model テーブル名


haseOne(1to1)
hasMany(1toMany)
belongsTo(複数レコードに対して種テーブルの一つのレコードが紐づけ)

migrate 
php artisan make:migration create_テーブル名_table

up()のなかに登録時の処理
down()のなかに取り消しの処理

factory(ランダムな値等を作成)
php artisan make:factory テーブル名Factory --model=Role

seeder
php artisan make:seeder テーブル名Seeder

（実行コマンド）
php artisan migrate
php artisan db:seed --class=RolesSeeder


（同時作成）
php artisan make:model Role --factory
php artisan make:model Role --migration
php artisan make:model Role --controller

実行コマンド（backend）
php artisan migrate(実行)
php artisan migrate:status(状況確認)
php artisan migrate:rollback(取り消し)
php artisan migrate:refresh（再実行）



ファクトリーとシーダーは、Laravelでデータベースにデータを挿入するための異なる目的を持つツールです。それぞれの使い分けについて説明します。
ファクトリー (Factory)
目的:
テストデータやダミーデータを生成するために使用します。
ランダムなデータを大量に生成するのに適しています。
特徴:
ファクトリーは、モデルのインスタンスを生成するためのテンプレートを提供します。
Fakerライブラリを使用して、ランダムなデータを生成します。
テストや開発環境でのデータ生成に便利です。
使用例:
ユーザーのテストデータを生成する際に、名前やメールアドレスをランダムに生成する。
商品のダミーデータを大量に生成して、UIのテストを行う。
コマンド:
Apply to addDB.txt
Run
User
シーダー (Seeder)
目的:
データベースに初期データを挿入するために使用します。
固定されたデータや、アプリケーションの初期設定に必要なデータを挿入するのに適しています。
特徴:
シーダーは、データベースに特定のデータを挿入するためのスクリプトです。
開発環境や本番環境での初期データの設定に便利です。
使用例:
ユーザーの役割（管理者、一般ユーザーなど）をデータベースに挿入する。
カテゴリや設定値など、アプリケーションの動作に必要なデータを挿入する。
コマンド:
Apply to addDB.txt
Run
RolesSeeder
使い分けのポイント
ファクトリーは、主にテストや開発中にランダムなデータを生成するために使用します。大量のデータを簡単に生成できるため、パフォーマンステストやUIテストに役立ちます。
シーダーは、アプリケーションの初期設定や固定データをデータベースに挿入するために使用します。特定のデータが必要な場合や、環境をセットアップする際に便利です。
これらを組み合わせて使用することで、開発やテストの効率を大幅に向上させることができます。



/Users/akaishiyuuto/Desktop/KingFisher.pem